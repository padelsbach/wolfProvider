# This file helps to set the environment variables to enable wolfProvider.
# It can be used on the command line, or by workflows.
# 'source' this file, don't run it directly
# To disable wolfProvider, run 'unset OPENSSL_CONF'
# To enable FIPS mode, set WOLFSSL_ISFIPS=1 before sourcing this file

if [[ -n "${ZSH_VERSION:-}" ]]; then
    [[ $ZSH_EVAL_CONTEXT =~ :file$ ]] && is_sourced=1 || is_sourced=0
else # bash
    [ "$0" = "$BASH_SOURCE" ] && is_sourced=0 || is_sourced=1
fi
if [ $is_sourced -eq 0 ]; then
    echo "Error: This script must be sourced, not executed."
    exit 1
fi

if [ -n "$BASH_SOURCE" ]; then
    SCRIPT_DIR=$(dirname "${BASH_SOURCE[0]}")
elif [ -n "$ZSH_VERSION" ]; then
    SCRIPT_DIR=$(dirname "${(%):-%x}")
else
    echo "Unsupported shell"
    exit 1
fi

pushd $SCRIPT_DIR
if [ -n "${GITHUB_WORKSPACE:-}" ]; then
    # In a GitHub Actions workflow, GITHUB_WORKSPACE is set to the root of the repository
    REPO_ROOT="$GITHUB_WORKSPACE"
elif git rev-parse --show-toplevel >/dev/null 2>&1; then
    # In a local environment, use the output of git rev-parse --show-toplevel
    REPO_ROOT="$(git rev-parse --show-toplevel)"
else
    # Fallback: use parent directory of scripts folder
    REPO_ROOT="$(dirname "$SCRIPT_DIR")"
fi
popd

echo "SCRIPT_DIR: $SCRIPT_DIR"
echo "REPO_ROOT: $REPO_ROOT"
echo "PWD: $PWD"

# Detect the openssl library path
if [ -d $REPO_ROOT/openssl-install/lib ]; then
    export OPENSSL_LIB_PATH=$REPO_ROOT/openssl-install/lib
elif [ -d $REPO_ROOT/openssl-install/lib64 ]; then
    export OPENSSL_LIB_PATH=$REPO_ROOT/openssl-install/lib64
else
    echo "Error: Could not find OpenSSL lib directory in $REPO_ROOT/openssl-install"
    exit 1
fi

WOLFSSL_LIB_PATH="$REPO_ROOT/wolfssl-install/lib"
WOLFPROV_LIB_PATH="$REPO_ROOT/wolfprov-install/lib"

# Always reconstruct LD_LIBRARY_PATH with correctly detected OPENSSL_LIB_PATH
# ${LD_LIBRARY_PATH:+:$LD_LIBRARY_PATH} expands to :$LD_LIBRARY_PATH only if LD_LIBRARY_PATH was already set
export LD_LIBRARY_PATH="$WOLFPROV_LIB_PATH:$WOLFSSL_LIB_PATH:$OPENSSL_LIB_PATH${LD_LIBRARY_PATH:+:$LD_LIBRARY_PATH}"

# Auto-detect FIPS mode and use appropriate config
if [ "${WOLFSSL_ISFIPS:-0}" = "1" ]; then
    DEFAULT_PROVIDER_CONF="$REPO_ROOT/provider-fips.conf"
    echo "FIPS mode detected, using provider-fips.conf"
else
    DEFAULT_PROVIDER_CONF="$REPO_ROOT/provider.conf"
fi
export OPENSSL_CONF="${OPENSSL_CONF:=$DEFAULT_PROVIDER_CONF}"

export OPENSSL_MODULES="${OPENSSL_MODULES:=$WOLFPROV_LIB_PATH}"
export PKG_CONFIG_PATH="${PKG_CONFIG_PATH:=$OPENSSL_LIB_PATH/pkgconfig}"

# Other variables used by test scripts
export WOLFPROV_PATH="${WOLFPROV_LIB_PATH}"
export WOLFPROV_CONFIG="${DEFAULT_PROVIDER_CONF}"
export OPENSSL_BIN="${REPO_ROOT}/openssl-install/bin/openssl"

# If openssl-install does not exist, exit with failure status to terminate 
# any workflows which depend on the result.
# For normal interactive command line usage, this result is fine to ignore.
if [ ! -d "$REPO_ROOT/openssl-install" ]; then
  echo "Warning: openssl-install directory does not exist in $REPO_ROOT, cannot confirm providers"
  if command -v tree >/dev/null 2>&1; then
    tree -L 3 $REPO_ROOT
  fi
  return 1
fi

echo "Checking OpenSSL providers:"
PROVIDER_LIST=$(mktemp -t provider-list.XXXXXX)
$OPENSSL_BIN list -providers | tee $PROVIDER_LIST
if grep -q libwolfprov $PROVIDER_LIST; then
  echo "libwolfprov found in OpenSSL providers"
else
  echo "ERROR: libwolfprov not found in OpenSSL providers"
  return 1
fi 

echo "Done!"
