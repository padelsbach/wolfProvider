name: Debian Package Test

# START OF COMMON SECTION
on:
  push:
    branches: [ '*'] # 'master', 'main', 'release/**' ]
  pull_request:
    branches: [ '*' ]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true
# END OF COMMON SECTION

jobs:
  libwolfprov-standalone:
    runs-on: ubuntu-22.04
    # Run inside Debian Bookworm to match packaging environment
    container:
      image: debian:bookworm
      env:
        DEBIAN_FRONTEND: noninteractive
    # This should be a safe limit for the tests to run.
    timeout-minutes: 20
    strategy:
      matrix:
        wolfssl_ref: [ 'v5.8.2-stable' ]
        openssl_ref: [ 'openssl-3.5.2' ]
        replace_default: [ true ]
    env:
      WOLFSSL_PACKAGES_PATH: /tmp/wolfssl-packages
      OPENSSL_PACKAGES_PATH: /tmp/openssl-packages
      WOLFPROV_PACKAGES_PATH: /tmp/wolfprov-packages
    steps:
      - name: Checkout wolfProvider
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Checking OpenSSL/wolfProvider packages in cache
        uses: actions/cache/restore@v4
        id: wolfprov-cache
        with:
          path: |
            ${{ env.WOLFSSL_PACKAGES_PATH }}
            ${{ env.OPENSSL_PACKAGES_PATH }}
            ${{ env.WOLFPROV_PACKAGES_PATH }}
          key: openssl-wolfprov-debian-packages-f7eb91f9b3bc786b7de4d5b6359f12d0282ee9b9-replace-default
          fail-on-cache-miss: true

      - name: Install package without custom openssl
        run: |
          printf "Installing OpenSSL/wolfProvider packages:\n"
          ls -la ${{ env.WOLFSSL_PACKAGES_PATH }}
          ls -la ${{ env.WOLFPROV_PACKAGES_PATH }}

          apt install --reinstall -y \
            ${{ env.WOLFSSL_PACKAGES_PATH }}/libwolfssl_*.deb

          apt-get update
          apt install -y openssl libssl3 apt-utils

          dpkg -i \
            ${{ env.WOLFPROV_PACKAGES_PATH }}/libwolfprov_*.deb

          printf "Packages installed: wolf\n"
          dpkg -l | grep wolf

          echo "End of installs"

      - name: Verify wolfProvider is properly installed
        run: |
          printf "Packages installed: wolf\n"
          dpkg -l | grep wolf
          printf "Packages installed: openssl\n"
          dpkg -l | grep openssl
          printf "Packages installed: libssl3\n"
          dpkg -l | grep libssl3
          printf "Packages installed: apt-utils\n"
          dpkg -l | grep apt-utils
          printf "Packages installed: libwolfprov"
          $GITHUB_WORKSPACE/scripts/verify-install.sh ${{ matrix.fips && '--fips' || '' }}

      - name: Test OpenSSL provider functionality
        run: |
          PROVIDER_CONF="/usr/lib/ssl/openssl.cnf.d/wolfprovider.conf"
          PROVIDER_CONF_BACKUP="/tmp/wolfprovider.conf.backup"

          # Temporarily move wolfprovider config so we can toggle between providers
          echo "Temporarily disabling wolfprovider for default provider tests:"
          mkdir -p /tmp/openssl-test
          if [ -f $PROVIDER_CONF ]; then
            mv $PROVIDER_CONF $PROVIDER_CONF_BACKUP
            echo "   - Moved $PROVIDER_CONF to $PROVIDER_CONF_BACKUP"
          else
            echo "$PROVIDER_CONF not found!"
            exit 1
          fi

          # Run the do-cmd-test.sh script to execute interoperability tests
          echo "Running OpenSSL provider interoperability tests..."
          OPENSSL_BIN=$(eval which openssl) ./scripts/cmd_test/do-cmd-tests.sh

          # Restore wolfprovider configuration
          echo "Restoring wolfprovider configuration:"
          if [ -f $PROVIDER_CONF_BACKUP ]; then
            mv $PROVIDER_CONF_BACKUP $PROVIDER_CONF
            echo "   - Restored $PROVIDER_CONF from $PROVIDER_CONF_BACKUP"
          fi

          echo "PASS: All provider interoperability tests successful"

      - name: Uninstall package and verify cleanup
        run: |
          # Uninstall the package
          apt-get remove --purge -y libwolfprov

          # Verify the package is removed
          if dpkg -l | grep -q libwolfprov; then
            echo "Package still installed after removal"
            dpkg -l | grep libwolfprov
            exit 1
          else
            echo "Package successfully removed"
          fi

          # Check if the config file is removed
          if [ -f /usr/lib/ssl/openssl.cnf.d/wolfprovider.conf ]; then
            echo "wolfprovider.conf still exists after package removal"
            ls -la /usr/lib/ssl/openssl.cnf.d/
            exit 1
          else
            echo "wolfprovider.conf successfully removed"
          fi

          # Check if the library files are removed
          if [ -f /usr/lib/*/ossl-modules/libwolfprov.so ]; then
            echo "libwolfprov.so still exists after package removal"
            find /usr/lib -name "libwolfprov.so*" 2>/dev/null || true
            exit 1
          else
            echo "libwolfprov.so successfully removed"
          fi

          # Verify default OpenSSL provider is active
          echo "Verifying Default Provider is Active:"
          openssl list -providers

          # Verify that the default provider is present and active
          echo "Checking default provider status:"
          if openssl list -providers | grep -q "default" && \
            openssl list -providers | grep -q "OpenSSL Default Provider" && \
            openssl list -providers | grep -q "status: active"; then
            echo "Default provider is present and active"
          else
            echo "Default provider verification failed"
            echo "Provider output:"
            openssl list -providers
            exit 1
          fi

          echo "Package uninstallation and cleanup verification successful"

