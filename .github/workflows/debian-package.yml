name: Debian Package Test

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ '*' ]

jobs:
  bookworm:
    runs-on: ubuntu-22.04
<<<<<<< HEAD
    # Important: use Debian Bookworm for compatibility
=======
    strategy:
      matrix:
        include:
          - fips_mode: true
            description: "FIPS Mode"
          - fips_mode: false
            description: "Non-FIPS Mode"
    # Important: use Debian Bookwork for compatibility
>>>>>>> 08f4141 (Add FIPS support for Debian package build)
    container:
      image: debian:bookworm   # or debian:bookworm-slim
      env:
        DEBIAN_FRONTEND: noninteractive
    steps:
    - name: Set up environment
      run: |
        # Update package lists
        apt-get update
        # Install build dependencies
        apt-get install -y \
          build-essential \
          devscripts \
          debhelper \
          dh-autoreconf \
          libtool \
          pkg-config \
          git \
          wget \
          curl \
          ca-certificates \
          openssl \
          dpkg-dev \
          lintian \
          fakeroot \
          equivs
        # Install additional tools for testing
        apt-get install -y \
          expect \
          xxd

    # Avoid "detected dubious ownership" warning
    - name: Ensure the working directory safe
      run: |
        git config --global --add safe.directory "$GITHUB_WORKSPACE"

    - name: Checkout wolfProvider
      uses: actions/checkout@v4
      with:
        fetch-depth: 1
    - run: |
        # Fetch tags
        git fetch --tags
        # List all tags
        git tag -l

    - name: Install wolfssl debian package
      run: |
        mkdir -p "$RUNNER_TEMP/wolfssl-pkg"
        cd "$RUNNER_TEMP/wolfssl-pkg"
        
<<<<<<< HEAD
        echo "Using standard wolfSSL package"
        tar -xvf $GITHUB_WORKSPACE/.github/packages/debian-wolfssl.tar.gz

=======
        # Use FIPS tarball if fips_flag is not empty, otherwise use standard tarball
        if [ "${{ matrix.fips_mode }}" = "true" ]; then
          echo "Using FIPS wolfSSL package"
          tar -xvf $GITHUB_WORKSPACE/.github/packages/debian-wolfssl-fips.tar.gz
        else
          echo "Using standard wolfSSL package"
          tar -xvf $GITHUB_WORKSPACE/.github/packages/debian-wolfssl.tar.gz
        fi
        
>>>>>>> 08f4141 (Add FIPS support for Debian package build)
        # Get current architecture
        CURRENT_ARCH=$(dpkg --print-architecture)
        echo "Current architecture: $CURRENT_ARCH"
        
        # Look for existing .deb files that match the current architecture
        cd debian-packages
        MATCHING_DEB_FILES=$(find . -name "*_${CURRENT_ARCH}.deb" -o -name "*_${CURRENT_ARCH}_*.deb" 2>/dev/null || true)
        
        if [ -n "$MATCHING_DEB_FILES" ]; then
          echo "Found matching .deb files for architecture $CURRENT_ARCH:"
          echo "$MATCHING_DEB_FILES"
          echo "Installing existing .deb files..."
          dpkg -i $MATCHING_DEB_FILES
        else
          echo "No matching .deb files found for architecture $CURRENT_ARCH, rebuilding from source..."
          dpkg-source -x wolfssl*.dsc
          cd wolfssl*/
          dpkg-buildpackage -b -us -uc
          dpkg -i ../libwolfssl*.deb
        fi

    - name: Build Debian package
      run: |
<<<<<<< HEAD
=======
        # Run the build script with or without FIPS based on matrix
        FIPS_FLAG=""
        if [ "${{ matrix.fips_mode }}" = "true" ]; then
          FIPS_FLAG="--enable-fips"
        fi
>>>>>>> 08f4141 (Add FIPS support for Debian package build)
        # Bypass the warning prompt with 'yes Y' 
        yes Y | ./scripts/build-wolfprovider.sh --debian $FIPS_FLAG

        # List generated packages
        echo "Generated Packages:"
        ls -la ../*.deb ../*.dsc ../*.tar.gz || true

    - name: Install package
      run: |
        # Find the package file
        PACKAGE_FILE=$(find ../ -name "libwolfprov_*.deb" | head -n1)
        if [ -z "$PACKAGE_FILE" ]; then
          echo "No package file found!"
          ls -la ../
          exit 1
        fi

        echo "Installing package: $PACKAGE_FILE and dependencies"
        apt install -y ./"$PACKAGE_FILE"

        # Verify installation
        echo "Package Installation Verification:"
        dpkg -l | grep libwolfprov
        dpkg -L libwolfprov

    - name: Test OpenSSL provider functionality
      run: |
        PROVIDER_CONF="/etc/ssl/openssl.cnf.d/wolfprovider.conf"
        PROVIDER_CONF_BACKUP="/tmp/wolfprovider.conf.backup"

        # Temporarily move wolfprovider config so we can toggle between providers
        echo "3. Temporarily disabling wolfprovider for default provider tests:"
        mkdir -p /tmp/openssl-test
        if [ -f $PROVIDER_CONF ]; then
          mv $PROVIDER_CONF $PROVIDER_CONF_BACKUP
          echo "   - Moved $PROVIDER_CONF to $PROVIDER_CONF_BACKUP"
        else
          echo "$PROVIDER_CONF not found!"
          exit 1
        fi

        # Run the do-cmd-test.sh script to execute interoperability tests
        echo "Running OpenSSL provider interoperability tests..."
        OPENSSL_BIN=$(eval which openssl) ./scripts/cmd_test/do-cmd-tests.sh

        # Restore wolfprovider configuration
        echo "5. Restoring wolfprovider configuration:"
        if [ -f $PROVIDER_CONF_BACKUP ]; then
          mv $PROVIDER_CONF_BACKUP $PROVIDER_CONF
          echo "   - Restored $PROVIDER_CONF from $PROVIDER_CONF_BACKUP"
        fi

        echo "PASS: All provider interoperability tests successful"

    - name: Uninstall package and verify cleanup
      run: |
        # Uninstall the package
        apt-get remove --purge -y libwolfprov

        # Verify the package is removed
        if dpkg -l | grep -q libwolfprov; then
          echo "Package still installed after removal"
          dpkg -l | grep libwolfprov
          exit 1
        else
          echo "Package successfully removed"
        fi

        # Check if the config file is removed
        if [ -f /etc/ssl/openssl.cnf.d/wolfprovider.conf ]; then
          echo "wolfprovider.conf still exists after package removal"
          ls -la /etc/ssl/openssl.cnf.d/
          exit 1
        else
          echo "wolfprovider.conf successfully removed"
        fi

        # Check if the library files are removed
        if [ -f /usr/lib/*/ossl-modules/libwolfprov.so ]; then
          echo "libwolfprov.so still exists after package removal"
          find /usr/lib -name "libwolfprov.so*" 2>/dev/null || true
          exit 1
        else
          echo "libwolfprov.so successfully removed"
        fi

        # Verify default OpenSSL provider is active
        echo "Verifying Default Provider is Active:"
        openssl list -providers

        # Verify that the default provider is present and active
        echo "Checking default provider status:"
        if openssl list -providers | grep -q "default" && \
           openssl list -providers | grep -q "OpenSSL Default Provider" && \
           openssl list -providers | grep -q "status: active"; then
          echo "Default provider is present and active"
        else
          echo "Default provider verification failed"
          echo "Provider output:"
          openssl list -providers
          exit 1
        fi

        echo "Package uninstallation and cleanup verification successful"

    - name: Move package artifacts
      run: |
        # Move the generated packages to the temp directory
        mv ../*.deb $RUNNER_TEMP/ || true
        mv ../*.dsc $RUNNER_TEMP/ || true
        mv ../*.tar.gz $RUNNER_TEMP/ || true

    # Save the build outputs which for use in release packages
    - name: Upload package artifacts
      if: always()
      uses: actions/upload-artifact@v4
      with:
<<<<<<< HEAD
        name: wolfprovider-debian-packages
=======
        name: wolfprovider-debian-packages${{ matrix.fips_mode && '-fips' }}
>>>>>>> 08f4141 (Add FIPS support for Debian package build)
        path: |
          ${{ runner.temp }}/*.deb
          ${{ runner.temp }}/*.dsc
          ${{ runner.temp }}/*.tar.gz
        retention-days: 7
