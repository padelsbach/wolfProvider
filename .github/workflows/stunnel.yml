name: Stunnel Tests

# START OF COMMON SECTION
on:
  push:
    branches: [ 'master', 'main', 'release/**' ]
  pull_request:
    branches: [ '*' ]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true
# END OF COMMON SECTION

jobs:
  build_wolfprovider:
    uses: ./.github/workflows/build-wolfprovider.yml
    with:
      wolfssl_ref: ${{ matrix.wolfssl_ref }}
      openssl_ref: ${{ matrix.openssl_ref }}
    strategy:
      matrix:
        wolfssl_ref: [ 'master', 'v5.8.0-stable' ]
        openssl_ref: [ 'openssl-3.5.0' ]

  test_stunnel:
    runs-on: ubuntu-22.04
    needs: build_wolfprovider
    # This should be a safe limit for the tests to run.
    timeout-minutes: 10
    strategy:
      matrix:
        stunnel_ref: [ 'master', 'stunnel-5.67' ]
        wolfssl_ref: [ 'master', 'v5.8.0-stable' ]
        openssl_ref: [ 'openssl-3.5.0' ]
        force_fail: ['WOLFPROV_FORCE_FAIL=1', '']
        exclude:
          - stunnel_ref: 'master'
            force_fail: 'WOLFPROV_FORCE_FAIL=1'
    steps:
      - name: Checkout wolfProvider
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Retrieving wolfSSL/wolfProvider from cache
        uses: actions/cache/restore@v4
        id: wolfprov-cache
        with:
          path: |
            wolfssl-install
            wolfprov-install
            openssl-install/lib64
            openssl-install/include
            openssl-install/bin

          key: wolfprov-${{ matrix.wolfssl_ref }}-${{ matrix.openssl_ref }}-${{ github.sha }}
          fail-on-cache-miss: true

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libwrap0-dev autoconf-archive autotools-dev m4

      # - name: Set up Python 3.12
      #   if : ${{ matrix.stunnel_ref == 'master' }}
      #   uses: actions/setup-python@v5
      #   with:
      #     python-version: '3.12'

      # - name: Set up Python 3.10
      #   if : ${{ matrix.stunnel_ref != 'master' }}
      #   uses: actions/setup-python@v5
      #   with:
      #     python-version: '3.10'

      - name: Check Python version
        run: python --version

      - name: Replace system openssl with wolfProvider build
        run: sudo ln -sf $GITHUB_WORKSPACE/openssl-install/bin/openssl /usr/bin/openssl

      - name: Checkout Stunnel
        uses: actions/checkout@v4
        with:
          repository: mtrojnar/stunnel
          ref: ${{ matrix.stunnel_ref }}
          path: stunnel
          fetch-depth: 1

      - name: Checkout OSP
        uses: actions/checkout@v4
        with:
          repository: wolfssl/osp
          path: osp
          fetch-depth: 1

      - name: Apply OSP patch to Stunnel
        if : ${{ matrix.stunnel_ref == 'stunnel-5.67' }}
        working-directory: ./stunnel
        run: |
          # Apply patch for WOLFPROV_FORCE_FAIL
          patch -p1 < $GITHUB_WORKSPACE/osp/wolfProvider/stunnel/stunnel-WPFF-5.67-wolfprov.patch

      - name: Build Stunnel
        working-directory: ./stunnel
        run: |
          autoreconf -ivf
          ./configure --with-ssl=$GITHUB_WORKSPACE/openssl-install/
          make -j

      - name: Update python cryptography module
        working-directory: ./stunnel
        run: |
          export LD_LIBRARY_PATH="$GITHUB_WORKSPACE/openssl-install/lib:$GITHUB_WORKSPACE/openssl-install/lib64"
          export CFLAGS="-I$GITHUB_WORKSPACE/openssl-install/include"
          export LDFLAGS="-L$GITHUB_WORKSPACE/openssl-install/lib -L$GITHUB_WORKSPACE/openssl-install/lib64"

          python3 -m venv myenv
          source myenv/bin/activate
          pip install cryptography  # will use your OpenSSL if built from source

      - name: Apply patch to disable pkcs12 test
        if : ${{ matrix.stunnel_ref == 'master' }}
        working-directory: ./stunnel
        run: |
          # Bypass the Certp12Test test
          perl -pe 's/^( \s*)stunnel = Certp12Test\(cfg, logger\)/$1return\n$1stunnel = Certp12Test(cfg, logger)/' -i tests/plugins/p07_p12cert.py

      - name: Verify stunnel with wolfProvider
        working-directory: ./stunnel
        run: |
          # Unset LD_LIBRARY_PATH after python setup
          unset LD_LIBRARY_PATH
          unset PKG_CONFIG_PATH
          unset OPENSSL_MODULES

          # Set up the environment for wolfProvider
          source $GITHUB_WORKSPACE/scripts/env-setup
          export ${{ matrix.force_fail }}

          # enter venv
          source myenv/bin/activate

          # Set this variable to prevent attempts to load the legacy OpenSSL 
          # provider, which we don't support.
          # This is necessary for OpenSSL 3.0+ to avoid errors related to legacy
          # algorithms that are not supported by wolfProvider.
          export CRYPTOGRAPHY_OPENSSL_NO_LEGACY=1

          # Verify stunnel
          ldd src/stunnel
          ldd src/stunnel | grep -E '(libssl|libcrypto)' | grep wolfProvider
          ./src/stunnel -version

          # Run tests
          # Results captured in tests/logs/results.log
          # Use `timeout` since the tests hang with WOLFPROV_FORCE_FAIL=1
          timeout 10 make check 2>&1 || true

          # grep for "failed: 0" in the results log, indicating success
          TEST_RESULT=$(grep -c "failed: 0" tests/logs/results.log || echo 1)
          echo "Test result: $TEST_RESULT"
          
          $GITHUB_WORKSPACE/.github/scripts/check-workflow-result.sh $TEST_RESULT ${{ matrix.force_fail }} stunnel
