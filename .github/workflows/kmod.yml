name: kmod Tests

# START OF COMMON SECTION
on:
  push:
    branches: [ '*' ] #  'master', 'main', 'release/**' ]
  pull_request:
    branches: [ '*' ]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true
# END OF COMMON SECTION

jobs:
  build_wolfprovider:
    uses: ./.github/workflows/build-wolfprovider.yml
    with:
      wolfssl_ref: ${{ matrix.wolfssl_ref }}
      openssl_ref: ${{ matrix.openssl_ref }}
    strategy:
      matrix:
        wolfssl_ref: [ 'master', 'v5.8.0-stable' ]
        openssl_ref: [ 'openssl-3.5.0' ]

  test_kmod:
    runs-on: ubuntu-22.04
    needs: build_wolfprovider
    # This should be a safe limit for the tests to run.
    timeout-minutes: 20
    strategy:
      matrix:
        kmod_ref: [ 'master', 'v33' ]
        wolfssl_ref: [ 'master', 'v5.8.0-stable' ]
        openssl_ref: [ 'openssl-3.5.0' ]
        force_fail: [ 'WOLFPROV_FORCE_FAIL=1', '' ]
    steps:
      # Checkout the source so we can run the check-workflow-result script
      - name: Checkout wolfProvider
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Retrieving wolfSSL/wolfProvider from cache
        uses: actions/cache/restore@v4
        id: wolfprov-cache
        with:
          path: |
            scripts
            wolfssl-source
            wolfssl-install
            wolfprov-install
            openssl-install
            provider.conf

          key: wolfprov-${{ matrix.wolfssl_ref }}-${{ matrix.openssl_ref }}-${{ github.sha }}
          fail-on-cache-miss: true

      - name: Install kmod dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential \
            autoconf \
            libtool \
            meson \
            pkg-config \
            libzstd-dev \
            liblzma-dev \
            scdoc \
            zlib1g-dev \
            libtool \
            dwarves

          sudo apt install -y linux-image-$(uname -r)
          # make sure openssl is not installed
          # sudo apt remove openssl libssl-dev
          sudo apt remove libssl-dev

      - name: Download kmod
        uses: actions/checkout@v4
        with:
          repository: kmod-project/kmod
          ref: ${{ matrix.kmod_ref }}
          path: kmod

      - name: Setup package config file
        run: |
          # Create a pkg-config file for OpenSSL libcrypto
          mkdir -p $GITHUB_WORKSPACE/openssl-install/lib64/pkgconfig
          printf "%s\n" \
            "prefix=$GITHUB_WORKSPACE/openssl-install" \
            "exec_prefix=\${prefix}" \
            "libdir=\${exec_prefix}/lib64" \
            "includedir=\${prefix}/include" \
            "" \
            "Name: OpenSSL-libcrypto" \
            "Description: OpenSSL cryptography library" \
            "Version: 3.5.0" \
            "Libs: -L\${libdir} -lcrypto" \
            "Cflags: -I\${includedir}" \
            > "$GITHUB_WORKSPACE/openssl-install/lib64/pkgconfig/libcrypto.pc"

      - name: Build kmod
        working-directory: kmod
        run: |
          export LD_LIBRARY_PATH=$GITHUB_WORKSPACE/wolfssl-install/lib:$GITHUB_WORKSPACE/openssl-install/lib64
          export PKG_CONFIG_PATH=$PWD/build/meson-private:$GITHUB_WORKSPACE/openssl-install/lib64/pkgconfig

          if [[ "${{ matrix.kmod_ref }}" =~ ^v([0-9]+)$ ]] && (( ${BASH_REMATCH[1]} <= 33 )); then
            echo "Legacy build path for version <= v33"
            ./autogen.sh
            ./configure CFLAGS="-g -O2 -I$GITHUB_WORKSPACE/openssl-install/include" \
              --prefix=/tmp/usr --sysconfdir=/tmp/etc --libdir=/tmp/lib \
              --enable-debug --with-zstd --with-xz --with-zlib --with-openssl
            make -j$(nproc)
          else
            echo "Modern build path for version > v33 or branch"
            export LD_LIBRARY_PATH=$GITHUB_WORKSPACE/wolfssl-install/lib:$GITHUB_WORKSPACE/openssl-install/lib64
            export PKG_CONFIG_PATH=$PWD/build/meson-private:$GITHUB_WORKSPACE/openssl-install/lib64/pkgconfig
            meson setup build -Dbuild-tests=true
            meson compile -C build
          fi
  
      - name: Run kmod tests
        working-directory: kmod
        run: |
          source $GITHUB_WORKSPACE/scripts/env-setup
          export ${{ matrix.force_fail }}

          if [[ "${{ matrix.kmod_ref }}" =~ ^v([0-9]+)$ ]] && (( ${BASH_REMATCH[1]} <= 33 )); then
            echo "Running legacy tests for version <= v33"
            make check || true

            TEST_RESULT=0

            PASS_COUNT=$(grep '^PASS' testsuite/*.log | wc -l)
            if [ "$PASS_COUNT" -ne 16 ]; then
              echo "Expected 16 PASS tests, got $PASS_COUNT"
              TEST_RESULT=1
            fi

            if grep '^FAIL' testsuite/*.log | grep -qv test_user_weakdep; then
              echo "Unexpected FAILs detected (excluding test_user_weakdep)"
              TEST_RESULT=1
            fi
          else
            echo "Running full test suite"
            meson test -C build
            # Logs written to build/meson-logs/testlog.txt
            grep -qv 'Ok:                 18' build/meson-logs/testlog.txt || TEST_RESULT=1
          fi

          $GITHUB_WORKSPACE/.github/scripts/check-workflow-result.sh $TEST_RESULT ${{ matrix.force_fail }} kmod
