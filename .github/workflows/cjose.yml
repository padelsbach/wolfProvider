name: cjose Tests

# START OF COMMON SECTION
on:
  push:
    branches: [ 'master', 'main', 'release/**' ]
  pull_request:
    branches: [ '**' ]
  workflow_run:
    workflows: ["Build Packages"]
    types:
      - completed
    branches: [ '**' ]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true
# END OF COMMON SECTION

jobs:
  test_cjose:
    if: ${{ github.event_name == 'workflow_run' && github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-22.04
    timeout-minutes: 20
    container:
      image: debian:bookworm
      env:
        DEBIAN_FRONTEND: noninteractive
    strategy:
      matrix:
        # Match the matrix from build.yml
        wolfssl_ref: [ 'v5.8.2-stable' ]
        openssl_ref: [ 'openssl-3.5.2' ]  # Note: build.yml uses 3.5.2, not 3.5.0
        replace_default: [ true ]
        # cjose-specific matrix
        cjose_ref: [ 'v0.6.2.1' ]
        force_fail: [ 'WOLFPROV_FORCE_FAIL=1', '' ]
    steps:
      - name: Set up environment
        run: |
          apt-get update
          apt-get install -y git sudo build-essential autoconf automake \
            libtool pkg-config libjansson-dev check ca-certificates dpkg-dev

      - name: Checkout wolfProvider
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Download wolfProvider packages
        uses: actions/download-artifact@v4
        with:
          name: wolfprov-debian-packages-${{ matrix.wolfssl_ref }}-${{ matrix.openssl_ref }}${{ matrix.replace_default && '-replace-default' || '' }}-${{ github.sha }}
          path: /tmp/wolfprov-packages

      - name: Install wolfProvider packages
        run: |
          $GITHUB_WORKSPACE/.github/scripts/install-packages.sh

      - name: Download cjose
        uses: actions/checkout@v4
        with:
          repository: OpenIDC/cjose
          ref: ${{ matrix.cjose_ref }}
          path: cjose
          fetch-depth: 1

      - name: Build cjose
        working-directory: cjose
        run: |
          ./configure CFLAGS="-Wno-error=deprecated-declarations"

          # Build cjose
          make

      - name: Run cjose tests
        working-directory: cjose
        run: |
          export ${{ matrix.force_fail }}
          make test 2>&1 | tee cjose-test.log
          TEST_RESULT=$(grep -q "FAIL: check_cjose" cjose-test.log && echo "1" || echo "0")
          echo "TEST_RESULT = $TEST_RESULT"
          $GITHUB_WORKSPACE/.github/scripts/check-workflow-result.sh $TEST_RESULT ${{ matrix.force_fail }} cjose
