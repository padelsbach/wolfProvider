name: libssh2 Tests

# START OF COMMON SECTION
on:
  push:
    branches: [ 'master', 'main', 'release/**' ]
  pull_request:
    branches: [ '*' ]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true
# END OF COMMON SECTION

jobs:
  build_wolfprovider:
    uses: ./.github/workflows/build-wolfprovider.yml
    with:
      wolfssl_ref: ${{ matrix.wolfssl_ref }}
      openssl_ref: ${{ matrix.openssl_ref }}
      replace_default: ${{ matrix.replace_default }}
    strategy:
      matrix:
        wolfssl_ref: [ 'v5.8.2-stable' ]
        openssl_ref: [ 'openssl-3.5.2' ]
        replace_default: [ true ]
        fips: [ false ]

  test_libssh2:
    runs-on: ubuntu-22.04
    container:
      image: debian:bookworm
      env:
        DEBIAN_FRONTEND: noninteractive
    needs: build_wolfprovider
    timeout-minutes: 20
    strategy:
      matrix:
        libssh2_ref: [ 'libssh2-1.10.0' ]
        wolfssl_ref: [ 'v5.8.2-stable' ]
        openssl_ref: [ 'openssl-3.5.2' ]
        force_fail: ['WOLFPROV_FORCE_FAIL=1', '']
        replace_default: [ true ]
        fips: [ false ]
    env:
      WOLFSSL_PACKAGES_PATH: /tmp/wolfssl-packages
      OPENSSL_PACKAGES_PATH: /tmp/openssl-packages
      WOLFPROV_PACKAGES_PATH: /tmp/wolfprov-packages
    steps:
      - name: Checkout wolfProvider
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Checking OpenSSL/wolfProvider packages in cache
        uses: actions/cache/restore@v4
        id: wolfprov-cache
        with:
          path: |
            ${{ env.WOLFSSL_PACKAGES_PATH }}
            ${{ env.OPENSSL_PACKAGES_PATH }}
            ${{ env.WOLFPROV_PACKAGES_PATH }}
          key: openssl-wolfprov-debian-packages-${{ github.sha }}${{ matrix.replace_default && '-replace-default' || '' }}
          fail-on-cache-miss: true

      - name: Install wolfSSL/OpenSSL/wolfprov packages
        run: |
          printf "Installing OpenSSL/wolfProvider packages:\n"
          ls -la ${{ env.WOLFSSL_PACKAGES_PATH }}
          ls -la ${{ env.OPENSSL_PACKAGES_PATH }}
          ls -la ${{ env.WOLFPROV_PACKAGES_PATH }}

          apt install --reinstall -y --allow-downgrades --allow-change-held-packages \
            ${{ env.WOLFSSL_PACKAGES_PATH }}/libwolfssl_*.deb

          apt install --reinstall -y --allow-downgrades --allow-change-held-packages \
            ${{ env.OPENSSL_PACKAGES_PATH }}/openssl_*.deb \
            ${{ env.OPENSSL_PACKAGES_PATH }}/libssl3_*.deb \
            ${{ env.OPENSSL_PACKAGES_PATH }}/libssl-dev_*.deb

          apt install --reinstall -y --allow-downgrades --allow-change-held-packages \
            ${{ env.WOLFPROV_PACKAGES_PATH }}/libwolfprov_*.deb

      - name: Verify wolfProvider is properly installed
        run: |
          $GITHUB_WORKSPACE/scripts/verify-install.sh ${{ matrix.replace_default && '--replace-default' || '' }} ${{ matrix.fips && '--fips' || '' }}

      - name: Install dependencies
        run: |
          export DEBIAN_FRONTEND=noninteractive
          apt-get update
          apt-get install -y git sudo build-essential autoconf automake \
            libtool pkg-config libjansson-dev check ca-certificates dpkg-dev \
            clang libc++-dev python3-impacket openssh-client openssh-server

      - name: Download libssh2
        uses: actions/checkout@v4
        with:
          repository: libssh2/libssh2
          ref: ${{ matrix.libssh2_ref }}
          path: libssh2
          fetch-depth: 1

      - name: Checkout OSP
        uses: actions/checkout@v4
        with:
          repository: wolfssl/osp
          path: osp
          fetch-depth: 1
      - run: |
          cd libssh2
          # Apply the wolfProvider patch
          patch -p1 < $GITHUB_WORKSPACE/osp/wolfProvider/libssh2/libssh2-${{ matrix.libssh2_ref }}-debian-wolfprov.patch

      - name: Build libssh2
        working-directory: libssh2
        run: |
          autoreconf -fi
          ./configure --with-crypto=openssl
          make -j$(nproc)

      - name: Run libssh2 tests
        working-directory: libssh2
        shell: bash
        run: |
          export ${{ matrix.force_fail }}
          # Always continue on errors to ensure we show test results
          set +e

          # Run the tests and capture the result
          set -o pipefail
          make check 2>&1 | tee libssh2-test.log
          TEST_RESULT=${PIPESTATUS[0]}
          $GITHUB_WORKSPACE/.github/scripts/check-workflow-result.sh $TEST_RESULT ${{ matrix.force_fail }} libssh2
