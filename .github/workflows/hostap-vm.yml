name: hostap hwsim test

# START OF COMMON SECTION
on:
  push:
    branches: ['*'] #[ 'master', 'main', 'release/**' ]
  pull_request:
    branches: [ '*' ]
  # allow manual runs of this workflow
  workflow_dispatch:
    inputs:
      run_type:
        description: 'Reason for manual run'
        required: false
        default: 'manual test'
        type: string

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true
# END OF COMMON SECTION

env:
  LINUX_REF: v6.7

jobs:
  build_wolfprovider:
    name: Build wolfProvider
    runs-on: ubuntu-22.04
    timeout-minutes: 20
    strategy:
      matrix:
        wolfssl_ref: [ 'master', 'v5.8.0-stable' ]
        openssl_ref: [ 'openssl-3.2.0' ]
        hostap_ref: [ 'hostap_2_11' ] # make sure this matches the hostap_ref in the test matrix below
    steps:
      - name: Checkout wolfProvider
        uses: actions/checkout@v4

      # Check if this version of wolfssl/wolfprovider has already been built,
      # mark to cache these items on post if we do end up building
      - name: Checking wolfSSL/wolfProvider in cache
        uses: actions/cache@v4
        id: wolfprov-cache
        with:
          path: |
            wolfssl-source
            wolfssl-install
            wolfprov-install
            provider.conf

          key: wolfprov-${{ matrix.wolfssl_ref }}-${{ github.sha }}
          lookup-only: true

      # If wolfssl/wolfprovider have not yet been built, pull ossl from cache
      - name: Checking OpenSSL in cache
        if: steps.wolfprov-${{ matrix.wolfssl_ref }}-cache.hit != 'true'
        uses: actions/cache@v4
        id: openssl-cache
        with:
          path: |
            openssl-source
            openssl-install

          key: ossl-depends-${{ matrix.openssl_ref }}-${{ github.sha }}
          lookup-only: true

      - name: ccache
        uses: hendrikmuhs/ccache-action@v1.2
        with:
          create-symlink: true

      # If not yet built this version, build it now
      - name: Build wolfProvider
        if: steps.wolfprov-${{ matrix.wolfssl_ref }}-cache.hit != 'true'
        run: |
          OPENSSL_TAG=${{ matrix.openssl_ref }} WOLFSSL_TAG=${{ matrix.wolfssl_ref }} ./scripts/build-wolfprovider.sh

      - name: Print errors
        if: ${{ failure() }}
        run: |
          if [ -f test-suite.log ] ; then
            cat test-suite.log
          fi

  build_uml_linux:
    name: Build UML (UserMode Linux)
    # if: github.repository_owner == 'wolfssl'
    runs-on: ubuntu-22.04
    # This should be a safe limit for the tests to run.
    timeout-minutes: 10
    steps:
      - name: Checking if we have kernel in cache
        uses: actions/cache@v4
        id: cache
        with:
          path: linux/linux
          key: ${{ env.LINUX_REF }}
          lookup-only: true

      # - name: Checkout hostap
      #   if: steps.cache.outputs.cache-hit != 'true'
      #   uses: actions/checkout@v4
      #   with:
      #     repository: julek-wolfssl/hostap-mirror
      #     path: hostap
      - name: Checkout hostap/wpa_supplicant
        run: |
          git clone https://w1.fi/cgit/hostap
          cd $GITHUB_WORKSPACE/hostap
          git fetch --tags
          git checkout ${{ matrix.hostap_ref }}

      - name: Checkout linux
        if: steps.cache.outputs.cache-hit != 'true'
        uses: actions/checkout@v4
        with:
          repository: torvalds/linux
          path: linux

      - name: Compile linux
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          cp hostap/tests/hwsim/vm/kernel-config.uml linux/.config
          cd linux
          yes "" | ARCH=um make -j $(nproc)

  hostap_test:
    strategy:
      fail-fast: false
      matrix:
        # should hostapd be compiled with wolfssl
        hostapd: [true]
        # should wpa_supplicant be compiled with wolfssl
        wpa_supplicant: [true]
        # Fix the versions of hostap and osp to not break testing when a new
        # patch is added in to osp. Tests are read from the corresponding
        # configs/hostap_ref/tests file.
        config: [
          # {
          #   hostap_ref: hostap_2_10,
          #   remove_teap: true,
          #   # TLS 1.3 does not work for this version
          #   # build_id: hostap-vm-build1,
          # },
          {
            hostap_ref: hostap_2_11,
            remove_teap: true,
            # TLS 1.3 does not work for this version
            # build_id: hostap-vm-build1,
          },
          # {
          #   hostap_ref: hostap_2_10,
          #   remove_teap: true,
          #   force_fail: WOLFPROV_FORCE_FAIL=1,
          #   # TLS 1.3 does not work for this version
          #   # build_id: hostap-vm-build1,
          # }
          # {
          #   hostap_ref: main,
          #   remove_teap: true,
          #   # TLS 1.3 does not work for this version
          #   # build_id: hostap-vm-build1,
          # },
        ]
        wolfssl_ref: [ 'master', 'v5.8.0-stable' ]
        openssl_ref: [ 'openssl-3.2.0' ]
        force_fail: ['WOLFPROV_FORCE_FAIL=1', '']
    name: hwsim test
    # For openssl 1.1
    # if: github.repository_owner == 'wolfssl'
    runs-on: ubuntu-22.04
    # This should be a safe limit for the tests to run.
    timeout-minutes: 45
    needs: [build_wolfprovider, build_uml_linux]
    steps:
      - name: Checking if we have kernel in cache
        uses: actions/cache/restore@v4
        id: cache
        with:
          path: linux/linux
          key: ${{ env.LINUX_REF }}
          fail-on-cache-miss: true

      - name: show file structure
        run: tree

        # No way to view the full strategy in the browser (really weird)
      - name: Print strategy
        run: |
          cat <<EOF
          ${{ toJSON(matrix) }}
          EOF

      - name: Print computed job run ID
        run: |
          SHA_SUM=$(sha256sum << 'END_OF_HEREDOC' | cut -d " " -f 1
          ${{ toJSON(github) }}
          END_OF_HEREDOC
          )
          echo "our_job_run_id=$SHA_SUM" >> $GITHUB_ENV
          echo Our job run ID is $SHA_SUM

      - name: Retrieving OpenSSL from cache
        uses: actions/cache/restore@v4
        id: openssl-cache
        with:
          path: |
            openssl-source
            openssl-install

          key: ossl-depends-${{ matrix.openssl_ref }}-${{ github.sha }}
          fail-on-cache-miss: true

      - name: Retrieving wolfSSL/wolfProvider from cache
        uses: actions/cache/restore@v4
        id: wolfprov-cache
        with:
          path: |
            wolfssl-source
            wolfssl-install
            wolfprov-install
            provider.conf

          key: wolfprov-${{ matrix.wolfssl_ref }}-${{ github.sha }}
          fail-on-cache-miss: true

      # Get the source so we can apply the patch
      - name: Checkout wolfProvider
        uses: actions/checkout@v4
        with:
          path: wolfprov-src
          sparse-checkout: |
            .github

      - name: Install dependencies
        run: |
          # Don't prompt for anything
          export DEBIAN_FRONTEND=noninteractive
          sudo apt-get update
          # hostap dependencies
          sudo apt-get install -y libpcap0.8 libpcap-dev curl libcurl4-openssl-dev \
            libnl-3-dev binutils-dev libssl-dev libiberty-dev libnl-genl-3-dev \
            libnl-route-3-dev libdbus-1-dev bridge-utils tshark
          sudo pip3 install pycryptodome

      # - name: Checkout hostap
      #   uses: actions/checkout@v4
      #   with:
      #     repository: julek-wolfssl/hostap-mirror
      #     path: hostap
      #     ref: ${{ matrix.config.hostap_ref }}

      - name: Checkout hostap/wpa_supplicant
        run: |
          git clone https://w1.fi/cgit/hostap
          cd $GITHUB_WORKSPACE/hostap
          git fetch --tags
          git checkout ${{ matrix.config.hostap_ref }}

      - name: Update certs
        working-directory: hostap/tests/hwsim/auth_serv
        run: ./update.sh

      - if: ${{ matrix.config.osp_ref }}
        name: Checkout OSP
        uses: actions/checkout@v4
        with:
          repository: wolfssl/osp
          path: osp
          ref: ${{ matrix.config.osp_ref }}

      - if: ${{ matrix.config.osp_ref }}
        name: Apply patch files
        working-directory: hostap
        run: |
          for f in $GITHUB_WORKSPACE/osp/hostap-patches/pending/*
          do
            patch -p1 < $f
          done

      - name: Apply extra patches
        working-directory: hostap
        run: |
          FILE=$GITHUB_WORKSPACE/wolfprov-src/.github/workflows/hostap-files/configs/${{ matrix.config.hostap_ref }}/extra.patch
          if [ -f "$FILE" ]; then
            echo "Applying patch file $FILE"
            patch -p1 < $FILE
          else
            echo "No extra patches found"
          fi

      - if: ${{ matrix.hostapd }}
        name: Setup hostapd config file
        run: |
          cp $GITHUB_WORKSPACE/wolfprov-src/.github/workflows/hostap-files/configs/${{ matrix.config.hostap_ref }}/hostapd.config \
             $GITHUB_WORKSPACE/hostap/hostapd/.config

          # export WOLFPROV_LIB_DIR=$GITHUB_WORKSPACE/wolfprov-install/lib
          # export WOLFSSL_LIB_DIR=$GITHUB_WORKSPACE/wolfssl-install/lib
          # export OPENSSL_LIB_DIR=$GITHUB_WORKSPACE/openssl-install/lib64

          # cat <<EOF >> $GITHUB_WORKSPACE/hostap/hostapd/.config
          #   CFLAGS += -I$WOLFPROV_LIB_DIR/../include -I$WOLFSSL_LIB_DIR/../include -I$OPENSSL_LIB_DIR/../include
          # EOF

          export WOLFPROV_LIB_DIR=$GITHUB_WORKSPACE/wolfprov-install/lib
          export WOLFSSL_LIB_DIR=$GITHUB_WORKSPACE/wolfssl-install/lib
          export OPENSSL_LIB_DIR=$GITHUB_WORKSPACE/openssl-install/lib64

          cat <<EOF >> $GITHUB_WORKSPACE/hostap/hostapd/.config
            CFLAGS += -I$WOLFPROV_LIB_DIR/../include -I$WOLFSSL_LIB_DIR/../include -I$OPENSSL_LIB_DIR/../include
            LIBS += -lwolfssl -lwolfprov
            LIBS += -L$WOLFPROV_LIB_DIR -Wl,-rpath=$WOLFPROV_LIB_DIR
            LIBS += -L$WOLFSSL_LIB_DIR -Wl,-rpath=$WOLFSSL_LIB_DIR
            LIBS += -L$OPENSSL_LIB_DIR -Wl,-rpath=$OPENSSL_LIB_DIR
          EOF

      - if: ${{ matrix.wpa_supplicant }}
        name: Setup wpa_supplicant config file
        run: |
          cp $GITHUB_WORKSPACE/wolfprov-src/.github/workflows/hostap-files/configs/${{ matrix.config.hostap_ref }}/wpa_supplicant.config \
             $GITHUB_WORKSPACE/hostap/wpa_supplicant/.config

          # export WOLFPROV_LIB_DIR=$GITHUB_WORKSPACE/wolfprov-install/lib
          # export WOLFSSL_LIB_DIR=$GITHUB_WORKSPACE/wolfssl-install/lib
          # export OPENSSL_LIB_DIR=$GITHUB_WORKSPACE/openssl-install/lib64

          # cat <<EOF >> $GITHUB_WORKSPACE/hostap/wpa_supplicant/.config
          #   CFLAGS += -I$WOLFPROV_LIB_DIR/../include -I$WOLFSSL_LIB_DIR/../include -I$OPENSSL_LIB_DIR/../include
          # EOF

          export WOLFPROV_LIB_DIR=$GITHUB_WORKSPACE/wolfprov-install/lib
          export WOLFSSL_LIB_DIR=$GITHUB_WORKSPACE/wolfssl-install/lib
          export OPENSSL_LIB_DIR=$GITHUB_WORKSPACE/openssl-install/lib64

          cat <<EOF >> $GITHUB_WORKSPACE/hostap/wpa_supplicant/.config
            LIBS += -lwolfssl -lwolfprov
            LIBS += -L$WOLFPROV_LIB_DIR -Wl,-rpath=$WOLFPROV_LIB_DIR
            LIBS += -L$WOLFSSL_LIB_DIR -Wl,-rpath=$WOLFSSL_LIB_DIR
            LIBS += -L$OPENSSL_LIB_DIR -Wl,-rpath=$OPENSSL_LIB_DIR
          EOF

      - name: Build hostap and wpa_supplicant
        working-directory: hostap/tests/hwsim/
        run: ./build.sh

      # - if: ${{ matrix.hostapd }}
      #   name: Confirm hostapd linking with wolfProvider
      #   run: |
      #     ldd hostap/hostapd/hostapd | grep libssl | grep wolfProvider
      #     ldd hostap/hostapd/hostapd | grep libcrypto | grep wolfProvider

      # - if: ${{ matrix.wpa_supplicant }}
      #   name: Confirm wpa_supplicant linking with wolfProvider
      #   run: |
      #     ldd hostap/wpa_supplicant/wpa_supplicant | grep libssl | grep wolfProvider
      #     ldd hostap/wpa_supplicant/wpa_supplicant | grep libcrypto | grep wolfProvider

      - if: ${{ matrix.config.remove_teap }}
        name: Remove EAP-TEAP from test configuration
        working-directory: hostap/tests/hwsim/auth_serv
        run: |
          sed -e 's/"erp-teap@example.com"\tTEAP//' -i eap_user.conf
          sed -e 's/"erp-teap@example.com"\tMSCHAPV2\t"password"\t\[2\]//' -i eap_user.conf
          sed -e 's/"TEAP"\t\tTEAP//' -i eap_user.conf
          sed -e 's/TEAP,//' -i eap_user.conf

      - if: ${{ runner.debug }}
        name: Enable hostap debug logging
        run: |
          echo "hostap_debug_flags=--debug" >> $GITHUB_ENV

      - if: ${{ matrix.force_fail }}
        name: Set wolfprov force fail flag
        run: |
          echo "hostap_force_fail_flag=--wp-force-fail" >> $GITHUB_ENV

      - name: Run tests
        id: testing
        working-directory: hostap/tests/hwsim/
        run: |
          cat <<EOF >> vm/vm-config
            KERNELDIR=$GITHUB_WORKSPACE/linux
            KVMARGS="-cpu host"
          EOF

          export WOLFPROV_LIB_DIR=$GITHUB_WORKSPACE/wolfprov-install/lib
          export OPENSSL_LIB_DIR=$GITHUB_WORKSPACE/openssl-install/lib64
          export LD_LIBRARY_PATH=$WOLFPROV_LIB_DIR:$OPENSSL_LIB_DIR
          export PKG_CONFIG_PATH=$OPENSSL_LIB_DIR/lib64/pkgconfig
          echo "LD_LIBRARY_PATH is set to $LD_LIBRARY_PATH"

          # Enable wolfProvider
          export OPENSSL_CONF=$WOLFPROV_LIB_DIR/provider.conf
          export OPENSSL_MODULES=$WOLFPROV_LIB_DIR
          export ${{ matrix.force_fail }}

          # Run tests in increments of 200 to not stall out the parallel-vm script
          while mapfile -t -n 200 ary && ((${#ary[@]})); do
            TESTS=$(printf '%s\n' "${ary[@]}" | tr '\n' ' ')
            echo "Running tests: $TESTS"
            echo
            HWSIM_RES=0 # Not set when command succeeds
            ./vm/parallel-vm.py --debug --nocurses 1 $TESTS  || HWSIM_RES=$?
            if [ "$HWSIM_RES" -ne "0" ]; then
              # Let's re-run the failing tests. We gather the failed tests from the log file.
              FAILED_TESTS=$(grep 'failed tests' /tmp/hwsim-test-logs/*-parallel.log | sed 's/failed tests: //' | tr ' ' '\n' | sort | uniq | tr '\n' ' ')
              printf 'failed tests: %s\n' "$FAILED_TESTS"
              ./vm/parallel-vm.py --debug --nocurses 1 $FAILED_TESTS
            fi
          done < $GITHUB_WORKSPACE/wolfprov-src/.github/workflows/hostap-files/configs/${{ matrix.config.hostap_ref }}/tests

      # The logs are quite big. It hasn't been useful so far so let's not waste
      # precious gh space.
      - name: zip logs
        # if: ${{ failure() && steps.testing.outcome == 'failure' }}
        working-directory: hostap/tests/hwsim/
        run: |
          rm /tmp/hwsim-test-logs/latest
          zip -9 -r logs.zip /tmp/hwsim-test-logs
      
      - name: Upload failure logs
        # if: ${{ failure() && steps.testing.outcome == 'failure' }}
        uses: actions/upload-artifact@v4
        with:
          name: hostap-logs-${{ env.our_job_run_id }}
          path: hostap/tests/hwsim/logs.zip
          retention-days: 5
