diff --git a/crypto/provider_predefined.c b/crypto/provider_predefined.c
index 068e0b7..7bc4ddb 100644
--- a/crypto/provider_predefined.c
+++ b/crypto/provider_predefined.c
@@ -5,23 +5,56 @@
  * this file except in compliance with the License.  You can obtain a copy
  * in the file LICENSE in the source distribution or at
  * https://www.openssl.org/source/license.html
- */
+*/
 
 #include <openssl/core.h>
+#include <stdio.h>
+#include <stdlib.h>
+#include "internal/dso.h"
 #include "provider_local.h"
 
-OSSL_provider_init_fn ossl_default_provider_init;
+static DSO *d = NULL;
+
+/* Common function to dynamically load libwolfprov and call wolfssl_provider_init */
+static int load_wolfprov_and_init(const OSSL_CORE_HANDLE *handle,
+                                const OSSL_DISPATCH *in, const OSSL_DISPATCH **out,
+                                void **provctx) {
+    int ret = 0;
+    OSSL_provider_init_fn *wolfssl_provider_init_fn = NULL;
+
+    d = DSO_new();
+    if (!d) { 
+        fprintf(stderr, "DSO_new() failed\n");
+        return 1;
+    }
+
+    if (!DSO_load(d, "wolfprov", NULL, 0)) { 
+        fprintf(stderr, "Could not load libwolfprov.so. Is the libwolfprov package installed?\n");
+        DSO_free(d);
+        return 1;
+    }
+
+    wolfssl_provider_init_fn = (OSSL_provider_init_fn*)DSO_bind_func(d, "wolfssl_provider_init");
+    if (!wolfssl_provider_init_fn) {
+        fprintf(stderr, "Failed to find wolfssl_provider_init symbol\n");
+        DSO_free(d);
+        return 1;
+    }
+
+    // Intentionally preserve the DSO 'd' here, since it needs to stay loaded
+    ret = wolfssl_provider_init_fn(handle, in, out, provctx);
+
+    return ret;
+}
+
 OSSL_provider_init_fn ossl_base_provider_init;
 OSSL_provider_init_fn ossl_null_provider_init;
-OSSL_provider_init_fn ossl_fips_intern_provider_init;
-#ifdef STATIC_LEGACY
-OSSL_provider_init_fn ossl_legacy_provider_init;
-#endif
+
 const OSSL_PROVIDER_INFO ossl_predefined_providers[] = {
 #ifdef FIPS_MODULE
-    { "fips", NULL, ossl_fips_intern_provider_init, NULL, 1 },
+    { "fips", NULL, load_wolfprov_and_init, NULL, 1 },
 #else
-    { "default", NULL, ossl_default_provider_init, NULL, 1 },
+    { "default", NULL, load_wolfprov_and_init, NULL, 1 },
 # ifdef STATIC_LEGACY
     { "legacy", NULL, ossl_legacy_provider_init, NULL, 0 },
 # endif
